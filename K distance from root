//here we use concept of iterative level order traversal 
//we take count =0 and increment every time during iterating
//if count is equal to k then store answer in k

vector<int> Kdistance(struct Node *root, int k)
{
  // Your code here
  int count=0;
  vector <int> ans;
  if(!root) return ans; 
  queue<Node *> q;
  q.push(root);
  while(!q.empty()){
      int size = q.size();
      count++;
      for(int i=0;i<size;i++){
          Node *temp = q.front();
          q.pop();
          if(count-1==k){
              ans.push_back(temp->data);
          }
          if(temp->left) q.push(temp->left);
          if(temp->right) q.push(temp->right);   
      }
  }
  return ans;
}
