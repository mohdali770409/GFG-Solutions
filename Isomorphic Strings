/* Calculate the length of both the strings
If the lengths of str1 and str2 are not the same, return false.
Create 2 vectors one for keeping track of visited characters of str2 and another one for storing the mapped characters.
Loop through every character of str1.
If this character is seen first time in str1, 
Then the corresponding character of str2 must also have not appeared before.
If the current character of str2 is visited before then return false. 
Else, mark the current character of str2 as visited.
And Store mapping of current characters as map[str1[i]] = str2[i]
Else,if check if the previous occurrence of str1[i] mapped to the same character which appears this time.
If it is mapped with another character then return false.
In the end, if all characters are mapped then return true.
*/



bool areIsomorphic(string str1, string str2
    {
        
        // Your code here
        unordered_map<char,char> help1;
        unordered_map<char,char> help2;
        if(str1.size()!=str2.size()) return 0;
        for(int i=0;i<str1.size();i++){
            if(help1.find(str1[i])!=help1.end()){
                if(help1[str1[i]]!=str2[i]) return 0;
            }
            else{
                help1[str1[i]] = str2[i];
            }
        }
        for(int i=0;i<str2.size();i++){
            if(help2.find(str2[i])!=help2.end()){
                if(help2[str2[i]]!=str1[i]) return 0;
            }
            else{
                help2[str2[i]] = str1[i];
            }
        }
        
        return 1;
        
        
    }
