 vector<int> _left(int arr[],int n){
        stack <int> st;
        vector <int> left;
        for(int i=0;i<n;i++){
            while(!st.empty() && st.top()>=arr[i]){
                st.pop();
            }
            if(st.empty()) left.push_back(0);
            else left.push_back(st.top());
            st.push(arr[i]);
        }
        return left;
    }
    vector <int> _right(int arr[],int n){
        stack <int> st;
        vector <int> right;
        for(int i= n-1;i>=0;i--){
            
            while(!st.empty() && st.top()>=arr[i]){
                st.pop();
            }
            if(st.empty()) right.push_back(0);
            else right.push_back(st.top());
            st.push(arr[i]);
            
        }
         reverse(right.begin(),right.end());
        return right;
    }
    int findMaxDiff(int A[], int n)
    {
      //Your code here
      
      vector<int> left = _left(A,n);
      vector <int> right = _right(A,n);
      int maxi = INT_MIN;
      for(int i=0;i<left.size();i++){
          maxi = max(maxi,abs(left[i]-right[i]));
          
      }
      return maxi;
    }
