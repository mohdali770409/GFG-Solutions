    //here minEle is initialised globally
    
    int minEle;
    stack<int> s;
    public:
    
       /*returns min element from stack*/
       

       int getMin(){
           
           //Write your code here
           
           //if stack is empty then simply return -1 else minimum value
           if(s.empty()) return -1;
           return minEle;
       }
       
       /*returns poped element from stack*/
       int pop(){
           
           //Write your code here
           
           
           int ans;
           
           //if stack is empty then return -1
           
           if(s.empty()) return -1;
           else{
           
           //if stack top element is greater than minEle then simply store into ans and return it
               if(s.top()>=minEle) {
                   ans = s.top();
                   s.pop();
                   
                   
               }
               
               //if stack top element is smaller than minEle it means our logic got hitted and we have to deal it
               else{
               
               //store minEle into answer variable so we will return and get previous minimun value 
                   ans = minEle;
                   minEle = 2*minEle -s.top();
                   s.pop();
               }
           }
           return ans;
       }
       
       /*push element x into the stack*/
       void push(int x){
           
           //Write your code here
           
           if(s.empty()) {
               minEle = x;
               s.push(x);
               
           }
           else{
               if(x<minEle){
                   
                   s.push(2*x-minEle);
                   minEle  =x;
                   
               }
               else s.push(x);
               
           }
               
           
       }
